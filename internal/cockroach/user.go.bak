package cockroach

import (
	"context"

	"gitlab.com/mikrowezel/log"
	"gitlab.com/mikrowezel/config"
	"gitlab.com/mikrowezel/granica/cockroach/model"
	"github.com/jmoiron/sqlx"
)

type (
	// UserRepo manages user related
	// repo operations
	UserRepo struct {
		ctx context.Context
		cfg *config.Config
		log *log.Logger
		tx  *sqlx.Tx
	}
)

// NewUserRepo returns an initialized user repo handler.
func NewUserRepo(ctx context.Context, cfg *config.Config, log *log.Logger, tx *sqlx.Tx) *UserRepo {
	return &UserRepo{
		ctx: ctx,
		cfg: cfg,
		log: log,
		tx:  tx,
	}
}

// GetAll users from repo.
func (r *UserRepo) GetAll() ([]*model.User, error) {
	return nil, nil
}

// Create user in repo.
func (r *UserRepo) Create(user *model.User) (*model.User, error) {
	st := `INSERT INTO users (user_type, username, password_digest, email, first_name, last_name, created_at, updated_at)
	VALUES (:user_type, :username, :password_digest, :email, :first_name, :last_name, :created_at, :updated_at)`

	_, err := r.tx.NamedExec(st, user)

	return user, err
}

// Get user data from repo.
func (r *UserRepo) Get(id interface{}) (*model.User, error) {
	return &model.User{}, nil
}

// Update user data in repo.
func (r *UserRepo) Update(*model.User) (*model.User, error) {
	return &model.User{}, nil
}

// Delete user data from repo.
func (r *UserRepo) Delete(id interface{}) error {
	return nil
}
