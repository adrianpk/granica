package cockroach

import (
	"context"
	"errors"

	_ "github.com/go-sql-driver/mysql" // package init.
	"github.com/jmoiron/sqlx"
	"gitlab.com/mikrowezel/config"
	"gitlab.com/mikrowezel/log"
)

var (
	// DB is a package general use DB handler.
	DB *Handler
)

type (
	// Handler is a DB handler.
	Handler struct {
		ctx   context.Context
		cfg   *config.Config
		log   *log.Logger
		name  string
		ready bool
		alive bool
		Conn  *sqlx.DB
	}
)

// Init a new handler.
func (h *Handler) Init(s Service) chan bool {
}

// Name returns the server name.
func (h *Handler) Name() string {
	return h.name
}

// Enable handler.
func (h *Handler) Enable() {
	h.ready = true
}

// Disable handler.
func (h *Handler) Disable() {
	h.ready = false
}

// IsReady returns the current state of handler.
func (h *Handler) IsReady() bool {
	return h.ready
}

// Start handler
func (h *Handler) Start() error {
	return nil
}

// Stop handler
func (h *Handler) Stop() {
	return
}

// Log returns current service logger.
func (h *Handler) Log() Logger {
	return h.log
}

// Ctx returns service context.
func (h *Handler) Ctx() context.Context {
	return h.ctx
}

// InitDB creates and return a new DB handler.
// it also stores it as the package default handler.
func InitDB(ctx context.Context, cfg *config.Config, log *log.Logger) (*Handler, error) {
	var err error
	DB, err = newHandler(ctx, cfg, log)
	if err != nil {
		return nil, err
	}
	return DB, nil
}

// NewHandler creates and returns a new DB handler.
func NewHandler(ctx context.Context, cfg *config.Config, log *log.Logger) *Handler {
	newHandler(ctx, cfg, log)
	return DB
}

// NewRepo create a new MySQL repo.
func newHandler(ctx context.Context, cfg *config.Config, log *log.Logger) (*Handler, error) {
	h := &Handler{
		ctx:   ctx,
		cfg:   cfg,
		log:   log,
		name:  "cockroach-handler",
		ready: false,
		alive: false,
	}

	h.Conn = <-h.RetryConnection()
	return h, nil // TODO: RetryConnection will eventually throw a timeout error.
}

// Name returns the server name.
func (h *Handler) Name() string {
	return h.name
}

// Start a new Redis cache.
func (h *Handler) Start() error {
	return nil
}

// Stop the repo.
func (h *Handler) Stop() {
	return
}

// Enable the repo.
func (h *Handler) Enable() {
}

// Disable the repo.
func (h *Handler) Disable() {
	h.ready = false
}

// IsReady returns the current state of the repo.
func (h *Handler) IsReady() bool {
	return h.ready
}

// GetConn from MySQL.
func GetConn() (*sqlx.DB, error) {

	if pctx == nil || pcfg == nil || plog == nil {
		return nil, errors.New("package has no initialized yet")
	}

	if DB == nil || DB.Conn == nil || DB.Conn.Ping() != nil {
		InitDB(pctx, pcfg, plog)
	}

	return DB.Conn, nil
}
