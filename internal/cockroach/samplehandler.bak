package service

import (
	"context"
)

type Handler struct {
	ctx   context.Context
	cfg   Config
	log   Logger
	name  string
	ready bool
	alive bool
}

// InitHandler creates and return a new base handler.
func InitHandler(ctx context.Context, cfg Config, log Logger, name string) (*Handler, error) {
	h, err := newHandler(ctx, cfg, log, name)
	if err != nil {
		return nil, err
	}
	return h, nil
}

// NewHandler creates and returns a new base handler.
func NewHandler(ctx context.Context, cfg Config, log Logger, name string) (*Handler, error) {
	return newHandler(ctx, cfg, log, name)
}

// NewRepo create a new MySQL repo.
func newHandler(ctx context.Context, cfg Config, log Logger, name string) (*Handler, error) {
	h := &Handler{
		ctx:   ctx,
		cfg:   cfg,
		log:   log,
		name:  name,
		ready: false,
		alive: false,
	}

	return h, nil
}

// Name returns the server name.
func (h *Handler) Name() string {
	return h.name
}

// Enable handler.
func (h *Handler) Enable() {
	h.ready = true
}

// Disable handler.
func (h *Handler) Disable() {
	h.ready = false
}

// IsReady returns the current state of handler.
func (h *Handler) IsReady() bool {
	return h.ready
}

// Start handler
func (h *Handler) Start() error {
	return nil
}

// Stop handler.
func (h *Handler) Stop() {
	return
}
